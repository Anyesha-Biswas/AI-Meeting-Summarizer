/** @jsxImportSource https://esm.sh/react@18.2.0 */
import React, { useState } from "https://esm.sh/react@18.2.0";
import { createRoot } from "https://esm.sh/react-dom@18.2.0/client";

function App() {
  const [file, setFile] = useState<File | null>(null);
  const [summary, setSummary] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const uploadedFile = event.target.files?.[0];
    if (uploadedFile) {
      // Limit file size to 10MB
      if (uploadedFile.size > 10 * 1024 * 1024) {
        setError('File is too large. Maximum file size is 10MB.');
        setFile(null);
        return;
      }
      setFile(uploadedFile);
      setError(null);
    }
  };

  const handleSubmit = async (event: React.FormEvent) => {
    event.preventDefault();
    if (!file) return;

    setIsLoading(true);
    setSummary(null);
    setError(null);

    try {
      const formData = new FormData();
      formData.append('meetingFile', file);

      const response = await fetch(window.location.href, {
        method: 'POST',
        body: formData
      });

      if (response.ok) {
        const result = await response.text();
        setSummary(result);
      } else {
        const errorText = await response.text();
        setError(errorText || 'Error processing the file');
      }
    } catch (error) {
      setError('Error: ' + error);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div style={styles.container}>
      <div style={styles.card}>
        <h1 style={styles.title}>ü§ñ AI Meeting Summarizer</h1>
        <form onSubmit={handleSubmit} style={styles.form}>
          <div style={styles.fileInputWrapper}>
            <input 
              type="file" 
              accept=".txt,.doc,.docx,.pdf,.mp3,.wav" 
              onChange={handleFileUpload}
              id="fileUpload"
              style={styles.fileInputHidden}
            />
            <label htmlFor="fileUpload" style={styles.fileInputLabel}>
              {file ? file.name : 'üìÅ Choose File'}
            </label>
          </div>
          <button 
            type="submit" 
            disabled={!file || isLoading}
            style={styles.submitButton}
          >
            {isLoading ? '‚è≥ Summarizing...' : '‚ú® Generate Summary'}
          </button>
        </form>
        {error && (
          <div style={styles.errorContainer}>
            <p style={styles.errorText}>{error}</p>
          </div>
        )}
        {summary && (
          <div style={styles.summaryContainer}>
            <h2 style={styles.summaryTitle}>üìÑ Meeting Insights</h2>
            <pre style={styles.summaryText}>{summary}</pre>
          </div>
        )}
      </div>
    </div>
  );
}

const styles = {
  container: {
    fontFamily: "'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif",
    minHeight: '100vh',
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    background: 'linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%)',
    margin: 0,
    padding: '20px',
    boxSizing: 'border-box',
  },
  card: {
    backgroundColor: 'white',
    borderRadius: '16px',
    boxShadow: '0 10px 25px rgba(0,0,0,0.1)',
    padding: '40px',
    width: '100%',
    maxWidth: '500px',
    textAlign: 'center',
    transition: 'all 0.3s ease',
  },
  errorContainer: {
    marginTop: '20px',
    padding: '15px',
    backgroundColor: '#ffebee',
    borderRadius: '8px',
    color: '#d32f2f',
  },
  errorText: {
    margin: 0,
    fontSize: '14px',
  },
  // ... rest of the styles remain the same
};

function client() {
  createRoot(document.getElementById("root")).render(<App />);
}
if (typeof document !== "undefined") { client(); }

export default async function server(request: Request): Promise<Response> {
  if (request.method === 'POST') {
    try {
      const formData = await request.formData();
      const meetingFile = formData.get('meetingFile') as File;

      if (!meetingFile) {
        return new Response('No file uploaded', { status: 400 });
      }

      // Limit file size to 10MB
      if (meetingFile.size > 10 * 1024 * 1024) {
        return new Response('File is too large. Maximum file size is 10MB.', { status: 400 });
      }

      const fileText = await meetingFile.text();

      // Truncate text if it's too long
      const MAX_TOKENS = 100000; // Roughly 75,000 characters
      const truncatedText = fileText.length > MAX_TOKENS 
        ? fileText.slice(0, MAX_TOKENS) 
        : fileText;

      const { OpenAI } = await import("https://esm.town/v/std/openai");
      const openai = new OpenAI();

      const completion = await openai.chat.completions.create({
        messages: [
          { 
            role: "system", 
            content: "You are an expert meeting summarizer. Provide a comprehensive yet concise summary highlighting key points, decisions, and action items. If the text seems truncated, mention that the full summary might be incomplete." 
          },
          { 
            role: "user", 
            content: `Please summarize the following meeting transcript:\n\n${truncatedText}` 
          }
        ],
        model: "gpt-4o-mini",
        max_tokens: 500,
      });

      const summary = completion.choices[0].message.content || 'No summary generated';

      return new Response(summary, {
        headers: { 'Content-Type': 'text/plain' }
      });

    } catch (error) {
      console.error(error);
      return new Response('Error processing file: ' + error.message, { status: 500 });
    }
  }

  return new Response(`
    <html>
      <head>
        <title>AI Meeting Summarizer</title>
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
        <script src="https://esm.town/v/std/catch"></script>
        <style>
          body { margin: 0; }
        </style>
      </head>
      <body>
        <div id="root"></div>
        <script type="module" src="${import.meta.url}"></script>
      </body>
    </html>
  `, {
    headers: { 'Content-Type': 'text/html' }
  });
}
